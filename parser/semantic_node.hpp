/*
    Boson v1.5 - Grammar analyzer generator

        Author: ict
        Email:  ictxiangxin@hotmail.com
        Site:   https://github.com/ictxiangxin/boson

    File: "semantic_node.hpp"
    These codes ware generated by the boson C++ code generator.
*/

#ifndef _BOSON_SEMANTIC_NODE_HPP_
#define _BOSON_SEMANTIC_NODE_HPP_

#include <vector>

namespace boson {
    template <class T>
    class BosonSemanticsNode {
    public:
        BosonSemanticsNode() = default;

        explicit BosonSemanticsNode(T data): _data(data) {};

        static BosonSemanticsNode &null_node() {
            static BosonSemanticsNode node;
            return node;
        }

        T &get_data() {
            return this->_data;
        }

        void set_data(T data) {
            this->_data = std::move(data);
        }

        int get_reduce_number() {
            return this->_reduce_number;
        }

        void set_reduce_number(int reduce_number) {
            this->_reduce_number = reduce_number;
        }

        const std::string &get_text() {
            return this->_text;
        }

        void set_text(std::string &text) {
            this->_text = text;
        }

        void append(const BosonSemanticsNode &item) {
            this->_children.push_back(item);
        }

        void insert(int index, const BosonSemanticsNode &item) {
            this->_children.insert(this->_children.begin() + index, item);
        }

        std::vector<BosonSemanticsNode> &children() {
            return this->_children;
        }

        BosonSemanticsNode &operator[](int index) {
            return this->_children[index];
        }

    protected:
        int _reduce_number = -1;
        std::string _text{};
        std::vector<BosonSemanticsNode> _children{};
        T _data;
    };
}

#endif
