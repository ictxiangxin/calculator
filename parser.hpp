/*
    Boson v1.2 - Grammar analyzer generator

        Author: ict
        Email:  ictxiangxin@hotmail.com
        Site:   https://github.com/ictxiangxin/boson

    These codes are generated by the boson C++ code generator.
        
         0: !name_0 -> !name_0 statement
         1: !name_0 -> ~
         2: !name_1 -> ',' expression
         3: !name_2 -> !name_2 !name_1
         4: !name_2 -> ~
         5: !name_3 -> '+'
         6: !name_3 -> '-'
         7: !name_4 -> !name_3
         8: !name_5 -> '*'
         9: !name_5 -> '/'
        10: !name_6 -> !name_5
        11: arguments -> expression !name_2
        12: calculator -> !name_0
        13: expression -> expression !name_4 expression_high
        14: expression -> expression_high
        15: expression_final -> '(' expression ')'
        16: expression_final -> function
        17: expression_final -> t_number
        18: expression_final -> t_symbol
        19: expression_high -> expression_high !name_6 expression_top
        20: expression_high -> expression_top
        21: expression_top -> expression_final
        22: expression_top -> expression_top '^' expression_final
        23: function -> t_symbol '(' arguments ')'
        24: statement -> function
        25: statement -> t_symbol '=' expression
*/


#include <stack>
#include <vector>
#include <set>
#include <unordered_map>
#include <string>
#include <functional>


class Token {
public:
    Token() = default;

    Token(std::string &text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    Token(const char *text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    Token(const char *text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    Token(std::string &text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    std::string text;
    int line = -1;
    std::string symbol;
};


class Tokenizer {
public:
    using lexical_function = std::function<std::string &(std::string &)>;

    Tokenizer() = default;

    std::vector<Token> &token_list() {
        return this->__token_list;
    }

    void skip() {
        this->__skip = true;
    }

    void newline() {
        this->__line++;
    }

    int error_line() {
        return __error_line;
    }

    int no_error_line() {
        return __no_error_line;
    }

    int tokenize(std::string text) {
        this->__token_list.clear();
        this->__line = 1;
        int state = this->__start_state;
        std::string token_string;
        unsigned long index = 0;
        while (index < text.length()) {
            char character = text[index];
            index++;
            bool get_token = false;
            if (this->__non_greedy_state_set.count(state)) {
                get_token = true;
            }
            if (this->_move_table_attribute.count(state)) {
                std::vector<int> &attribute_list = this->_move_table_attribute[state];
                std::vector<std::set<char>> &character_set_list = this->_move_table_character_set[state];
                std::vector<std::vector<std::vector<int>>> &state_range_list = this->_move_table_range_list[state];
                std::vector<int> &next_state_list = this->_move_table_next_state[state];
                unsigned long i;
                for (i = 0; i < attribute_list.size(); i++) {
                    int attribute = attribute_list[i];
                    std::set<char> &character_set = character_set_list[i];
                    std::vector<std::vector<int>> &range_list = state_range_list[i];
                    int next_state = next_state_list[i];
                    bool condition;
                    if (attribute == 2) {
                        condition = !character_set.count(character);
                        for (auto & range : range_list) {
                            condition &= character < range[0] || character > range[1];
                        }
                    } else {
                        condition = character_set.count(character);
                        if (attribute == 1 && this->__character_set.count(character) == 0) {
                            condition = true;
                        }
                        for (auto & range : range_list) {
                            if (condition || (range[0] <= character && character <= range[1])) {
                                condition = true;
                                break;
                            }
                        }
                    }
                    if (condition) {
                        token_string += character;
                        state = next_state;
                        break;
                    }
                }
                if (i == attribute_list.size()) {
                    if (this->__end_state_set.count(state)) {
                        get_token = true;
                    } else {
                        this->__error_line = this->__line;
                        return this->__error_line;
                    }
                }
            } else {
                if (this->__end_state_set.count(state)) {
                    get_token = true;
                } else {
                    this->__error_line = this->__line;
                    return this->__error_line;
                }
            }
            if (get_token) {
                this->_generate_token(state, token_string);
                token_string = "";
                state = this->__start_state;
                index--;
            }
        }
        if (this->__end_state_set.count(state)) {
            this->_generate_token(state, token_string);
        } else {
            throw std::runtime_error("Invalid state.");
        }
        this->__token_list.emplace_back("", this->__line, "$");
        return this->__error_line;
    }

    void lexical_function_entity(std::string &function_name, lexical_function &function) {
        this->__lexical_function[function_name] = function;
    }

private:
    std::vector<Token> __token_list;
    int __line = 1;
    int __error_line = -1;
    int __no_error_line = -1;
    bool __skip = false;
    std::unordered_map<int, std::vector<int>> _move_table_attribute = {
        {0, {0,0,0,0,0,0,0,0,0,0,0,0,0}},
        {14, {0}},
        {10, {0}},
        {7, {0}},
        {5, {0,0}},
        {1, {0}}
    };
    std::unordered_map<int, std::vector<std::set<char>>> _move_table_character_set = {
        {0, {{'\x5f'},{'\x2a'},{},{'\x2f'},{'\x2b'},{'\x5e'},{'\x20','\x09'},{'\x2c'},{'\x29'},{'\x0a'},{'\x28'},{'\x3d'},{'\x2d'}}},
        {14, {{}}},
        {10, {{'\x0d'}}},
        {7, {{'\x20','\x09'}}},
        {5, {{},{'\x2e'}}},
        {1, {{'\x5f'}}}
    };
    std::unordered_map<int, std::vector<std::vector<std::vector<int>>>> _move_table_range_list = {
        {0, {{{'\x41', '\x5a'},{'\x61', '\x7a'}},{},{{'\x30', '\x39'}},{},{},{},{},{},{},{},{},{},{}}},
        {14, {{{'\x30', '\x39'}}}},
        {10, {{}}},
        {7, {{}}},
        {5, {{{'\x30', '\x39'}},{}}},
        {1, {{{'\x30', '\x39'},{'\x41', '\x5a'},{'\x61', '\x7a'}}}}
    };
    std::unordered_map<int, std::vector<int>> _move_table_next_state = {
        {0, {1,2,5,3,4,6,7,8,9,10,11,12,13}},
        {14, {14}},
        {10, {15}},
        {7, {7}},
        {5, {5,14}},
        {1, {1}}
    };
    std::set<char> __character_set = {'\x6c','\x43','\x6f','\x55','\x74','\x69','\x4a','\x2a','\x66','\x68','\x78','\x4c','\x75','\x31','\x49','\x64','\x2f','\x79','\x67','\x45','\x52','\x33','\x56','\x53','\x2b','\x30','\x61','\x7a','\x32','\x37','\x4b','\x38','\x5e','\x20','\x2c','\x71','\x47','\x0d','\x57','\x59','\x58','\x6a','\x5f','\x72','\x44','\x2e','\x09','\x6e','\x77','\x65','\x73','\x50','\x36','\x42','\x29','\x6b','\x39','\x54','\x0a','\x6d','\x63','\x62','\x70','\x28','\x35','\x4e','\x76','\x46','\x4f','\x34','\x48','\x41','\x5a','\x3d','\x2d','\x51','\x4d'};
    int __start_state = 0;
    std::set<int> __end_state_set = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    std::unordered_map<int, std::string> __lexical_symbol_mapping = {
        {1, "t_symbol"},
        {2, "!symbol_7"},
        {3, "!symbol_8"},
        {4, "!symbol_5"},
        {5, "t_number"},
        {6, "!symbol_9"},
        {7, "skip"},
        {8, "!symbol_4"},
        {9, "!symbol_3"},
        {10, "newline"},
        {11, "!symbol_2"},
        {12, "!symbol_1"},
        {13, "!symbol_6"},
        {14, "t_number"},
        {15, "newline"}
    };
    std::set<int> __non_greedy_state_set = {};
    std::unordered_map<std::string, std::vector<std::string>> __symbol_function_mapping = {
        {"skip", {"skip"}},
        {"newline", {"skip","newline"}}
    };
    std::unordered_map<std::string, lexical_function> __lexical_function;

    std::string &_invoke_lexical_function(std::string &symbol, std::string &token_string) {
        this->__skip = false;
        if (this->__symbol_function_mapping.count(symbol)) {
            for (const auto& function : this->__symbol_function_mapping[symbol]) {
                if (this->__lexical_function.count(function)) {
                    token_string = this->__lexical_function[function](token_string);
                } else if (function == "skip") {
                    this->skip();
                } else if (function == "newline") {
                    this->newline();
                }
            }
        }
        return token_string;
    }

    void _generate_token(int state, std::string &token_string) {
        std::string symbol;
        if (this->__lexical_symbol_mapping.count(state)) {
            symbol = this->__lexical_symbol_mapping[state];
        } else {
            symbol = "!symbol";
        }
        token_string = this->_invoke_lexical_function(symbol, token_string);
        if (!this->__skip) {
            this->__token_list.emplace_back(token_string, this->__line, symbol);
        }
    }
};


class BosonGrammarNode {
public:
    BosonGrammarNode() = default;

    explicit BosonGrammarNode(std::string &text) {
        this->set_text(text);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const BosonGrammarNode &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const BosonGrammarNode &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<BosonGrammarNode> &children() {
        return this->_children;
    }

    BosonGrammarNode &operator[](int index) {
        return this->_children[index];
    }

private:
    int _reduce_number = -1;
    std::string _text;
    std::vector<BosonGrammarNode> _children;
};


class BosonGrammar {
public:
    BosonGrammar() = default;

    BosonGrammarNode &get_grammar_tree() {
        return this->_grammar_tree;
    }

    void set_grammar_tree(BosonGrammarNode &grammar_tree) {
        this->_grammar_tree = grammar_tree;
    }

    int get_error_index() {
        return this->_error_index;
    }

    void set_error_index(int error_index) {
        this->_error_index = error_index;
    }

private:
    BosonGrammarNode _grammar_tree;
    int _error_index = -1;
};


template <class T>
class BosonSemanticsNode {
public:
    BosonSemanticsNode() = default;

    explicit BosonSemanticsNode(T data): _data(data) {};

    static BosonSemanticsNode &null_node() {
        static BosonSemanticsNode node;
        return node;
    }

    T &get_data() {
        return this->_data;
    }

    void set_data(T data) {
        this->_data = std::move(data);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    const std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const BosonSemanticsNode &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const BosonSemanticsNode &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<BosonSemanticsNode> &children() {
        return this->_children;
    }

    BosonSemanticsNode &operator[](int index) {
        return this->_children[index];
    }

protected:
    int _reduce_number = -1;
    std::string _text;
    std::vector<BosonSemanticsNode> _children;
    T _data;
};


class GrammarAnalyzer {
public:
    GrammarAnalyzer() = default;

    BosonGrammar grammar_analysis(std::vector<Token> token_list) {
        BosonGrammar grammar;
        std::stack<int> analysis_stack;
        std::stack<BosonGrammarNode> symbol_stack;
        analysis_stack.push(0);
        int token_index = 0;
        while (token_index < token_list.size()) {
            Token &token = token_list[token_index];
            int current_state = analysis_stack.top();
            std::string operation = "e";
            int terminal_index = this->_terminal_index[token.symbol];
            if (this->_action_table.count(current_state)) {
                std::unordered_map<int, std::string> &actions = this->_action_table[current_state];
                if (actions.count(terminal_index)) {
                    operation = actions[terminal_index];
                }
            }
            char operation_flag = operation[0];
            if (operation_flag == 'e') {
                grammar.set_error_index(token_index);
                return grammar;
            } else if (operation_flag == 's') {
                int state_number = (int) strtol(operation.c_str() + 1, nullptr, 10);
                analysis_stack.push(state_number);
                token_index++;
                BosonGrammarNode grammar_node(token.text);
                symbol_stack.push(grammar_node);
            } else if (operation_flag == 'r') {
                int statement_index = (int) strtol(operation.c_str() + 1, nullptr, 10) - 1;
                int reduce_sum = this->_reduce_symbol_sum[statement_index];
                for (int i = 0; i < reduce_sum; i++) {
                    analysis_stack.pop();
                }
                current_state = analysis_stack.top();
                int current_non_terminal_index = this->_reduce_to_non_terminal_index[statement_index];
                int goto_next_state = -1;
                if (this->_goto_table.count(current_state)) {
                    std::unordered_map<int, int> &goto_table = this->_goto_table[current_state];
                    if (goto_table.count(current_non_terminal_index)) {
                        goto_next_state = goto_table[current_non_terminal_index];
                    }
                }
                if (goto_next_state == -1) {
                    throw std::runtime_error("Invalid goto action.");
                }
                analysis_stack.push(goto_next_state);
                if (this->_node_table.count(statement_index)) {
                    std::vector<BosonGrammarNode> symbol_package;
                    for (int i = 0; i < reduce_sum; i++) {
                        symbol_package.insert(symbol_package.begin(), symbol_stack.top());
                        symbol_stack.pop();
                    }
                    symbol_stack.push(this->_generate_grammar_tuple(statement_index, this->_node_table[statement_index], symbol_package));
                } else if (this->_none_grammar_tuple_reduce.count(statement_index)) {
                    BosonGrammarNode grammar_node;
                    for (int i = 0; i < reduce_sum; i++) {
                        grammar_node.insert(0, symbol_stack.top());
                        symbol_stack.pop();
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                } else {
                    throw std::runtime_error("Invalid reduce number.");
                }
            } else if (operation_flag == 'a') {
                grammar.set_grammar_tree(symbol_stack.top());
                return grammar;
            } else {
                throw std::runtime_error("Invalid action.");
            }
        }
        throw std::runtime_error("Analyzer unusual exit.");
    }

private:
    std::unordered_map<std::string, int>_terminal_index = {
        {"!symbol_1", 0},
        {"t_number", 1},
        {"!symbol_3", 2},
        {"!symbol_5", 3},
        {"$", 4},
        {"!symbol_9", 5},
        {"!symbol_2", 6},
        {"!symbol_4", 7},
        {"!symbol_7", 8},
        {"!symbol_6", 9},
        {"t_symbol", 10},
        {"!symbol_8", 11}
    };
    
    std::unordered_map<int, std::unordered_map<int, std::string>> _action_table = {
        {0, {{4, "r2"}, {10, "r2"}}}, 
        {1, {{4, "a"}}}, 
        {2, {{4, "r13"}, {10, "s5"}}}, 
        {3, {{4, "r25"}, {10, "r25"}}}, 
        {4, {{4, "r1"}, {10, "r1"}}}, 
        {5, {{0, "s6"}, {6, "s7"}}}, 
        {6, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {7, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {8, {{2, "r15"}, {3, "r15"}, {4, "r15"}, {7, "r15"}, {8, "s21"}, {9, "r15"}, {10, "r15"}, {11, "s19"}}}, 
        {9, {{2, "r18"}, {3, "r18"}, {4, "r18"}, {5, "r18"}, {7, "r18"}, {8, "r18"}, {9, "r18"}, {10, "r18"}, {11, "r18"}}}, 
        {10, {{3, "s24"}, {4, "r26"}, {9, "s25"}, {10, "r26"}}}, 
        {11, {{2, "r21"}, {3, "r21"}, {4, "r21"}, {5, "s26"}, {7, "r21"}, {8, "r21"}, {9, "r21"}, {10, "r21"}, {11, "r21"}}}, 
        {12, {{2, "r17"}, {3, "r17"}, {4, "r17"}, {5, "r17"}, {7, "r17"}, {8, "r17"}, {9, "r17"}, {10, "r17"}, {11, "r17"}}}, 
        {13, {{2, "r19"}, {3, "r19"}, {4, "r19"}, {5, "r19"}, {6, "s7"}, {7, "r19"}, {8, "r19"}, {9, "r19"}, {10, "r19"}, {11, "r19"}}}, 
        {14, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {15, {{2, "r22"}, {3, "r22"}, {4, "r22"}, {5, "r22"}, {7, "r22"}, {8, "r22"}, {9, "r22"}, {10, "r22"}, {11, "r22"}}}, 
        {16, {{2, "r5"}, {3, "s24"}, {7, "r5"}, {9, "s25"}}}, 
        {17, {{2, "s29"}}}, 
        {18, {{1, "r11"}, {6, "r11"}, {10, "r11"}}}, 
        {19, {{1, "r10"}, {6, "r10"}, {10, "r10"}}}, 
        {20, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {21, {{1, "r9"}, {6, "r9"}, {10, "r9"}}}, 
        {22, {{1, "r8"}, {6, "r8"}, {10, "r8"}}}, 
        {23, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {24, {{1, "r6"}, {6, "r6"}, {10, "r6"}}}, 
        {25, {{1, "r7"}, {6, "r7"}, {10, "r7"}}}, 
        {26, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {27, {{2, "s33"}, {3, "s24"}, {9, "s25"}}}, 
        {28, {{2, "r12"}, {7, "s35"}}}, 
        {29, {{2, "r24"}, {3, "r24"}, {4, "r24"}, {5, "r24"}, {7, "r24"}, {8, "r24"}, {9, "r24"}, {10, "r24"}, {11, "r24"}}}, 
        {30, {{2, "r20"}, {3, "r20"}, {4, "r20"}, {5, "s26"}, {7, "r20"}, {8, "r20"}, {9, "r20"}, {10, "r20"}, {11, "r20"}}}, 
        {31, {{2, "r14"}, {3, "r14"}, {4, "r14"}, {7, "r14"}, {8, "s21"}, {9, "r14"}, {10, "r14"}, {11, "s19"}}}, 
        {32, {{2, "r23"}, {3, "r23"}, {4, "r23"}, {5, "r23"}, {7, "r23"}, {8, "r23"}, {9, "r23"}, {10, "r23"}, {11, "r23"}}}, 
        {33, {{2, "r16"}, {3, "r16"}, {4, "r16"}, {5, "r16"}, {7, "r16"}, {8, "r16"}, {9, "r16"}, {10, "r16"}, {11, "r16"}}}, 
        {34, {{2, "r4"}, {7, "r4"}}}, 
        {35, {{1, "s9"}, {6, "s14"}, {10, "s13"}}}, 
        {36, {{2, "r3"}, {3, "s24"}, {7, "r3"}, {9, "s25"}}}
    };

    std::unordered_map<int, std::unordered_map<int, int>> _goto_table = {
        {0, {{6, 1}, {13, 2}}}, 
        {2, {{3, 4}, {9, 3}}}, 
        {6, {{7, 10}, {8, 11}, {9, 12}, {12, 15}, {15, 8}}}, 
        {7, {{7, 16}, {8, 11}, {9, 12}, {11, 17}, {12, 15}, {15, 8}}}, 
        {8, {{1, 18}, {4, 20}}}, 
        {10, {{2, 23}, {14, 22}}}, 
        {14, {{7, 27}, {8, 11}, {9, 12}, {12, 15}, {15, 8}}}, 
        {16, {{2, 23}, {10, 28}, {14, 22}}}, 
        {20, {{8, 30}, {9, 12}, {12, 15}}}, 
        {23, {{8, 11}, {9, 12}, {12, 15}, {15, 31}}}, 
        {26, {{9, 12}, {12, 32}}}, 
        {27, {{2, 23}, {14, 22}}}, 
        {28, {{0, 34}}}, 
        {31, {{1, 18}, {4, 20}}}, 
        {35, {{7, 36}, {8, 11}, {9, 12}, {12, 15}, {15, 8}}}, 
        {36, {{2, 23}, {14, 22}}}
    };
    
    std::unordered_map<int, std::string> _node_table = {
        {0, "('*0', '1')"},
        {1, "()"},
        {25, "('0', '2')"},
        {23, "('0', '2')"},
        {3, "('*0', '1')"},
        {4, "()"},
        {11, "('0', ('*1', ('1',)))"},
        {13, "('0', '*1', '2')"},
        {19, "('0', '*1', '2')"},
        {22, "('0', '1', '2')"},
        {15, "('1',)"},
        {18, "('0',)"},
        {17, "('0',)"}
    };

    std::vector<int> _reduce_symbol_sum = {2, 0, 2, 2, 0, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 4, 1, 3};

    std::vector<int> _reduce_to_non_terminal_index = {13, 13, 0, 10, 10, 14, 14, 2, 1, 1, 4, 11, 6, 7, 7, 12, 12, 12, 12, 15, 15, 8, 8, 9, 3, 3};

    std::set<int> _none_grammar_tuple_reduce = {2, 5, 6, 7, 8, 9, 10, 12, 14, 16, 20, 21, 24};

    BosonGrammarNode _generate_grammar_tuple(int statement_index, std::string &node_tuple, std::vector<BosonGrammarNode> &symbol_package) {
        BosonGrammarNode grammar_node;
        int state = 0;
        int sub_start_index = -1;
        bool star = false;
        int parenthesis_count = 0;
        std::string number_text;
        for (size_t i = 1; i < node_tuple.length(); i++) {
            char c = node_tuple[i];
            if (state == 0) {
                if (c == '(') {
                    state = 2;
                } else if (c == '$') {
                    BosonGrammarNode reduce_node;
                    reduce_node.set_reduce_number(statement_index);
                    grammar_node.append(reduce_node);
                } else if (c == '?') {
                    for (auto &node : symbol_package) {
                        grammar_node.append(node);
                    }
                } else if (c == '\'' || c == ',' || c == ' ' || c == ')') {
                    continue;
                } else if (c == '*') {
                    star = true;
                } else if ('0' <= c && c <= '9') {
                    number_text += c;
                    state = 1;
                } else {
                    throw std::runtime_error("Invalid grammar node.");
                }
            } else if (state == 1) {
                if ('0' <= c && c <= '9') {
                    number_text += c;
                } else {
                    i--;
                    int reduce_number = (int) strtol(number_text.c_str(), nullptr, 10);
                    if (star) {
                        for (auto &node : symbol_package[reduce_number].children()) {
                            grammar_node.append(node);
                        }
                    } else {
                        grammar_node.append(symbol_package[reduce_number]);
                    }
                    star = false;
                    number_text = "";
                    state = 0;
                }
            } else if (state == 2) {
                if (c == '*') {
                    star = true;
                } else if (c == '\'' || c == ',' || c == ' ') {
                    continue;
                } else if ('0' <= c && c <= '9') {
                    number_text += c;
                } else {
                    i--;
                    state = 3;
                }
            } else {
                if (c == '(') {
                    if (parenthesis_count == 0) {
                        sub_start_index = i;
                    }
                    parenthesis_count++;
                } else if (c == ')') {
                    parenthesis_count--;
                    if (parenthesis_count == 0) {
                        int reduce_number = (int) strtol(number_text.c_str(), nullptr, 10);
                        std::string sub_node_tuple = node_tuple.substr(sub_start_index, i - sub_start_index + 1);
                        for (auto &each: symbol_package[reduce_number].children()) {
                            BosonGrammarNode sub_node = this->_generate_grammar_tuple(-1, sub_node_tuple, each.children());
                            if (star) {
                                for (auto &node : sub_node.children()) {
                                    grammar_node.append(node);
                                }
                            } else {
                                grammar_node.append(sub_node);
                            }
                        }
                        star = false;
                        number_text = "";
                        state = 0;
                    }
                }
            }
        }
        grammar_node.set_reduce_number(statement_index);
        return grammar_node;
    }
};


template <class T>
class SemanticsAnalyzer {
public:
    using semantic_function = std::function<BosonSemanticsNode<T>(BosonSemanticsNode<T> &)>;

    SemanticsAnalyzer() = default;

    BosonSemanticsNode<T> semantics_analysis(BosonGrammarNode &grammar_tree) {
        return this->_semantics_analysis(grammar_tree);
    }

    static BosonSemanticsNode<T> default_semantics_entity(BosonSemanticsNode<T> &semantics_node) {
        return semantics_node;
    }

    static BosonSemanticsNode<T> naive_semantics_entity(BosonSemanticsNode<T> &semantics_node) {
        if (semantics_node.children().size() == 1) {
            return semantics_node[0];
        } else {
            return semantics_node;
        }
    }

    void semantics_entity(int reduce_number, semantic_function function) {
        std::string reduce_name = "!grammar_" + std::to_string(reduce_number);
        this->semantics_entity(reduce_name, function);
    }

    void semantics_entity(const char *reduce_name, semantic_function function) {
        std::string reduce_name_string(reduce_name);
        this->semantics_entity(reduce_name_string, function);
    }

    void semantics_entity(std::string &reduce_name, semantic_function function) {
        this->_semantics_entity[reduce_name] = function;
    }

private:
    std::unordered_map<int, std::string> _reduce_number_to_grammar_name = {
        {25, "set_variable"}, 
        {23, "function"}, 
        {13, "compute"}, 
        {19, "compute"}, 
        {22, "compute"}, 
        {15, "expression"}, 
        {18, "get_variable"}, 
        {17, "number"}
    };

    std::unordered_map<int, int> _reduce_number_to_grammar_number = {
        {12, 0}, 
        {24, 2}, 
        {11, 4}, 
        {14, 6}, 
        {20, 8}, 
        {21, 10}, 
        {16, 12}
    };

    std::set<int> _naive_reduce_number = {5, 6, 8, 9, 14, 16, 17, 18, 20, 21, 24};

    std::unordered_map<std::string, semantic_function> _semantics_entity;

    BosonSemanticsNode<T> _semantics_analysis(BosonGrammarNode &grammar_tree) {
        std::string grammar_name;
        if (this->_reduce_number_to_grammar_name.count(grammar_tree.get_reduce_number())) {
            grammar_name = this->_reduce_number_to_grammar_name[grammar_tree.get_reduce_number()];
        } else if (this->_reduce_number_to_grammar_number.count(grammar_tree.get_reduce_number())) {
            grammar_name = "!grammar_" + std::to_string(this->_reduce_number_to_grammar_number[grammar_tree.get_reduce_number()]);
        } else {
            grammar_name = "!grammar_hidden";
        }
        BosonSemanticsNode<T> semantics_node;
        for (auto &node: grammar_tree.children()) {
            if (!node.children().empty()) {
                semantics_node.append(this->_semantics_analysis(node));
            } else {
                BosonSemanticsNode<T> temp_node;
                temp_node.set_reduce_number(node.get_reduce_number());
                temp_node.set_text(node.get_text());
                semantics_node.append(temp_node);
            }
        }
        if (this->_semantics_entity.count(grammar_name)) {
            return this->_semantics_entity[grammar_name](semantics_node);
        } else if (this->_naive_reduce_number.count(grammar_tree.get_reduce_number())) {
            return SemanticsAnalyzer::naive_semantics_entity(semantics_node);
        } else {
            return SemanticsAnalyzer::default_semantics_entity(semantics_node);
        }
    }
};
