/*
    Boson v1.3 - Grammar analyzer generator

        Author: ict
        Email:  ictxiangxin@hotmail.com
        Site:   https://github.com/ictxiangxin/boson

    These codes ware generated by the boson C++ code generator.
*/


#include <stack>
#include <vector>
#include <set>
#include <unordered_map>
#include <string>
#include <functional>


class Token {
public:
    Token() = default;

    Token(std::string &text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    Token(const char *text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    Token(const char *text, const int line, std::string &symbol): text(text), line(line), symbol(symbol) {};

    Token(std::string &text, const int line, const char *symbol): text(text), line(line), symbol(symbol) {};

    std::string text{};
    int line = -1;
    std::string symbol{};
};


class Tokenizer {
public:
    using lexical_function = std::function<std::string &(std::string &)>;

    Tokenizer() = default;

    std::vector<Token> &token_list() {
        return this->_token_list;
    }

    void skip() {
        this->_skip = true;
    }

    void newline() {
        this->_line++;
    }

    int error_line() {
        return _error_line;
    }

    int no_error_line() {
        return _no_error_line;
    }

    int tokenize(std::string text) {
        this->_token_list.clear();
        this->_line = 1;
        int state = this->_start_state;
        std::string token_string{};
        unsigned long index = 0;
        while (index < text.length()) {
            char character = text[index];
            index++;
            bool get_token = false;
            if (this->_non_greedy_state_set.count(state)) {
                get_token = true;
            }
            if (this->_compact_move_table.count(state)) {
                std::vector<std::tuple<int, std::set<char>, std::vector<std::tuple<char, char>>, int>> state_move_table = this->_compact_move_table[state];
                unsigned long i;
                for (i = 0; i < state_move_table.size(); i++) {
                    std::tuple<int, std::set<char>, std::vector<std::tuple<char, char>>, int> compact_table = state_move_table[i];
                    int attribute = std::get<0>(compact_table);
                    std::set<char> &character_set = std::get<1>(compact_table);
                    std::vector<std::tuple<char, char>> &range_list = std::get<2>(compact_table);
                    int next_state = std::get<3>(compact_table);
                    bool condition;
                    if (attribute == 2) {
                        condition = !character_set.count(character);
                        for (auto & range : range_list) {
                            condition &= character < std::get<0>(range) || character > std::get<1>(range);
                        }
                    } else {
                        condition = character_set.count(character);
                        if (attribute == 1 && this->_character_set.count(character) == 0) {
                            condition = true;
                        }
                        for (auto & range : range_list) {
                            if (condition || (std::get<0>(range) <= character && character <= std::get<1>(range))) {
                                condition = true;
                                break;
                            }
                        }
                    }
                    if (condition) {
                        token_string += character;
                        state = next_state;
                        break;
                    }
                }
                if (i == state_move_table.size()) {
                    if (this->_end_state_set.count(state)) {
                        get_token = true;
                    } else {
                        this->_error_line = this->_line;
                        return this->_error_line;
                    }
                }
            } else {
                if (this->_end_state_set.count(state)) {
                    get_token = true;
                } else {
                    this->_error_line = this->_line;
                    return this->_error_line;
                }
            }
            if (get_token) {
                this->_generate_token(state, token_string);
                token_string = "";
                state = this->_start_state;
                index--;
            }
        }
        if (this->_end_state_set.count(state)) {
            this->_generate_token(state, token_string);
        } else {
            throw std::runtime_error("Invalid state.");
        }
        this->_token_list.emplace_back("", this->_line, "$");
        return this->_error_line;
    }

    void register_function(std::string &function_name, lexical_function &function) {
        this->_lexical_function[function_name] = function;
    }

private:
    std::vector<Token> _token_list{};
    int _line = 1;
    int _error_line = -1;
    int _no_error_line = -1;
    bool _skip = false;
    std::unordered_map<int, std::vector<std::tuple<int, std::set<char>, std::vector<std::tuple<char, char>>, int>>> _compact_move_table = {
        {0, {
            {0, {'\x5f'}, {{'\x41', '\x5a'},{'\x61', '\x7a'}}, 1},
            {0, {}, {{'\x30', '\x39'}}, 2},
            {0, {'\x20','\x09'}, {}, 3},
            {0, {'\x0a'}, {}, 4},
            {0, {'\x3d'}, {}, 5},
            {0, {'\x28'}, {}, 6},
            {0, {'\x29'}, {}, 7},
            {0, {'\x2c'}, {}, 8},
            {0, {'\x2b'}, {}, 9},
            {0, {'\x2d'}, {}, 10},
            {0, {'\x2a'}, {}, 11},
            {0, {'\x2f'}, {}, 12},
            {0, {'\x5e'}, {}, 13}
        }},
        {14, {
            {0, {}, {{'\x30', '\x39'}}, 14}
        }},
        {4, {
            {0, {'\x0d'}, {}, 15}
        }},
        {3, {
            {0, {'\x20','\x09'}, {}, 3}
        }},
        {2, {
            {0, {}, {{'\x30', '\x39'}}, 2},
            {0, {'\x2e'}, {}, 14}
        }},
        {1, {
            {0, {'\x5f'}, {{'\x30', '\x39'},{'\x41', '\x5a'},{'\x61', '\x7a'}}, 1}
        }}
    };
    std::set<char> _character_set = {'\x59','\x51','\x28','\x4d','\x4e','\x32','\x09','\x33','\x73','\x4a','\x44','\x55','\x38','\x34','\x3d','\x49','\x2c','\x69','\x5a','\x37','\x70','\x2a','\x46','\x58','\x47','\x68','\x41','\x4b','\x2b','\x63','\x66','\x31','\x6b','\x39','\x6d','\x36','\x79','\x20','\x0a','\x71','\x2f','\x50','\x75','\x6c','\x74','\x43','\x42','\x78','\x4c','\x52','\x77','\x6f','\x6a','\x57','\x7a','\x0d','\x56','\x5f','\x64','\x6e','\x4f','\x65','\x45','\x35','\x62','\x48','\x67','\x5e','\x30','\x61','\x2d','\x76','\x54','\x29','\x2e','\x53','\x72'};
    int _start_state = 0;
    std::set<int> _end_state_set = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    std::unordered_map<int, std::string> _lexical_symbol_mapping = {
        {1, "t_symbol"},
        {2, "t_number"},
        {3, "skip"},
        {4, "newline"},
        {5, "!symbol_1"},
        {6, "!symbol_2"},
        {7, "!symbol_3"},
        {8, "!symbol_4"},
        {9, "!symbol_5"},
        {10, "!symbol_6"},
        {11, "!symbol_7"},
        {12, "!symbol_8"},
        {13, "!symbol_9"},
        {14, "t_number"},
        {15, "newline"}
    };
    std::set<int> _non_greedy_state_set = {};
    std::unordered_map<std::string, std::vector<std::string>> _symbol_function_mapping = {
        {"t_symbol", {}},
        {"t_number", {}},
        {"skip", {"skip"}},
        {"newline", {"skip","newline"}}
    };
    std::unordered_map<std::string, lexical_function> _lexical_function{};

    std::string &_invoke_lexical_function(std::string &symbol, std::string &token_string) {
        this->_skip = false;
        if (this->_symbol_function_mapping.count(symbol)) {
            for (const auto& function : this->_symbol_function_mapping[symbol]) {
                if (this->_lexical_function.count(function)) {
                    token_string = this->_lexical_function[function](token_string);
                } else if (function == "skip") {
                    this->skip();
                } else if (function == "newline") {
                    this->newline();
                }
            }
        }
        return token_string;
    }

    void _generate_token(int state, std::string &token_string) {
        std::string symbol;
        if (this->_lexical_symbol_mapping.count(state)) {
            symbol = this->_lexical_symbol_mapping[state];
        } else {
            symbol = "!symbol";
        }
        token_string = this->_invoke_lexical_function(symbol, token_string);
        if (!this->_skip) {
            this->_token_list.emplace_back(token_string, this->_line, symbol);
        }
    }
};


class BosonGrammarNode {
public:
    BosonGrammarNode() = default;

    explicit BosonGrammarNode(std::string &text) {
        this->set_text(text);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const BosonGrammarNode &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const BosonGrammarNode &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<BosonGrammarNode> &children() {
        return this->_children;
    }

    BosonGrammarNode &operator[](int index) {
        return this->_children[index];
    }

private:
    int _reduce_number = -1;
    std::string _text{};
    std::vector<BosonGrammarNode> _children{};
};


class BosonGrammar {
public:
    BosonGrammar() = default;

    BosonGrammarNode &get_grammar_tree() {
        return this->_grammar_tree;
    }

    void set_grammar_tree(BosonGrammarNode &grammar_tree) {
        this->_grammar_tree = grammar_tree;
    }

    int get_error_index() {
        return this->_error_index;
    }

    void set_error_index(int error_index) {
        this->_error_index = error_index;
    }

    int no_error_index() {
        return this->_no_error_index;
    }

private:
    BosonGrammarNode _grammar_tree;
    int _error_index = -1;
    int _no_error_index = -1;
};


template <class T>
class BosonSemanticsNode {
public:
    BosonSemanticsNode() = default;

    explicit BosonSemanticsNode(T data): _data(data) {};

    static BosonSemanticsNode &null_node() {
        static BosonSemanticsNode node;
        return node;
    }

    T &get_data() {
        return this->_data;
    }

    void set_data(T data) {
        this->_data = std::move(data);
    }

    int get_reduce_number() {
        return this->_reduce_number;
    }

    void set_reduce_number(int reduce_number) {
        this->_reduce_number = reduce_number;
    }

    const std::string &get_text() {
        return this->_text;
    }

    void set_text(std::string &text) {
        this->_text = text;
    }

    void append(const BosonSemanticsNode &item) {
        this->_children.push_back(item);
    }

    void insert(int index, const BosonSemanticsNode &item) {
        this->_children.insert(this->_children.begin() + index, item);
    }

    std::vector<BosonSemanticsNode> &children() {
        return this->_children;
    }

    BosonSemanticsNode &operator[](int index) {
        return this->_children[index];
    }

protected:
    int _reduce_number = -1;
    std::string _text{};
    std::vector<BosonSemanticsNode> _children{};
    T _data;
};


class Parser {
public:
    Parser() = default;

    BosonGrammar parse(std::vector<Token> token_list) {
        BosonGrammar grammar;
        std::stack<int> analysis_stack;
        std::stack<BosonGrammarNode> symbol_stack;
        analysis_stack.push(0);
        int token_index = 0;
        while (token_index < token_list.size()) {
            Token &token = token_list[token_index];
            int current_state = analysis_stack.top();
            std::string operation = "e";
            int terminal_index = this->_terminal_index_mapping[token.symbol];
            if (this->_sparse_action_table.count(current_state)) {
                std::unordered_map<int, std::string> &actions = this->_sparse_action_table[current_state];
                if (actions.count(terminal_index)) {
                    operation = actions[terminal_index];
                }
            }
            char operation_flag = operation[0];
            if (operation_flag == 'e') {
                grammar.set_error_index(token_index);
                return grammar;
            } else if (operation_flag == 's') {
                int state_number = (int) strtol(operation.c_str() + 1, nullptr, 10);
                analysis_stack.push(state_number);
                token_index++;
                BosonGrammarNode grammar_node(token.text);
                symbol_stack.push(grammar_node);
            } else if (operation_flag == 'r') {
                int statement_index = (int) strtol(operation.c_str() + 1, nullptr, 10);
                int reduce_count = this->_reduce_symbol_count[statement_index];
                for (int i = 0; i < reduce_count; i++) {
                    analysis_stack.pop();
                }
                current_state = analysis_stack.top();
                int current_non_terminal_index_mapping = this->_reduce_non_terminal_index[statement_index];
                int goto_next_state = -1;
                if (this->_sparse_goto_table.count(current_state)) {
                    std::unordered_map<int, int> &goto_table = this->_sparse_goto_table[current_state];
                    if (goto_table.count(current_non_terminal_index_mapping)) {
                        goto_next_state = goto_table[current_non_terminal_index_mapping];
                    }
                }
                if (goto_next_state == -1) {
                    throw std::runtime_error("Invalid goto action.");
                }
                analysis_stack.push(goto_next_state);
                if (this->_sentence_index_grammar_tuple_mapping.count(statement_index)) {
                    std::vector<BosonGrammarNode> symbol_package{};
                    for (int i = 0; i < reduce_count; i++) {
                        symbol_package.insert(symbol_package.begin(), symbol_stack.top());
                        symbol_stack.pop();
                    }
                    BosonGrammarNode grammar_node;
                    for (std::string &node_string : this->_sentence_index_grammar_tuple_mapping[statement_index]) {
                        if (node_string[0] == '*') {
                            int reduce_number = (int) strtol(node_string.c_str() + 1, nullptr, 10);
                            for (BosonGrammarNode &node : symbol_package[reduce_number].children()) {
                                grammar_node.append(node);
                            }
                        } else {
                            int reduce_number = (int) strtol(node_string.c_str(), nullptr, 10);
                            grammar_node.append(symbol_package[reduce_number]);
                        }
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                } else if (this->_none_grammar_tuple_reduce_set.count(statement_index)) {
                    BosonGrammarNode grammar_node;
                    for (int i = 0; i < reduce_count; i++) {
                        grammar_node.insert(0, symbol_stack.top());
                        symbol_stack.pop();
                    }
                    grammar_node.set_reduce_number(statement_index);
                    symbol_stack.push(grammar_node);
                } else {
                    throw std::runtime_error("Invalid reduce number.");
                }
            } else if (operation_flag == 'a') {
                grammar.set_grammar_tree(symbol_stack.top());
                return grammar;
            } else {
                throw std::runtime_error("Invalid action.");
            }
        }
        throw std::runtime_error("Analyzer unusual exit.");
    }

private:
    std::unordered_map<std::string, int>_terminal_index_mapping = {
        {"!symbol_5", 0},
        {"t_number", 1},
        {"$", 2},
        {"!symbol_9", 3},
        {"!symbol_1", 4},
        {"!symbol_2", 5},
        {"!symbol_7", 6},
        {"!symbol_6", 7},
        {"t_symbol", 8},
        {"!symbol_3", 9},
        {"!symbol_4", 10},
        {"!symbol_8", 11}
    };
    
    std::unordered_map<int, std::unordered_map<int, std::string>> _sparse_action_table = {
        {0, {{2, "r8"}, {8, "r8"}}}, 
        {1, {{2, "a"}}}, 
        {2, {{2, "r26"}, {8, "s4"}}}, 
        {3, {{2, "r3"}, {8, "r3"}}}, 
        {4, {{4, "s7"}, {5, "s6"}}}, 
        {5, {{2, "r22"}, {8, "r22"}}}, 
        {6, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {7, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {8, {{0, "s28"}, {2, "r21"}, {7, "s27"}, {8, "r21"}}}, 
        {9, {{0, "r10"}, {2, "r10"}, {6, "s20"}, {7, "r10"}, {8, "r10"}, {9, "r10"}, {10, "r10"}, {11, "s19"}}}, 
        {10, {{0, "r5"}, {2, "r5"}, {3, "r5"}, {5, "s6"}, {6, "r5"}, {7, "r5"}, {8, "r5"}, {9, "r5"}, {10, "r5"}, {11, "r5"}}}, 
        {11, {{0, "r13"}, {2, "r13"}, {3, "s22"}, {6, "r13"}, {7, "r13"}, {8, "r13"}, {9, "r13"}, {10, "r13"}, {11, "r13"}}}, 
        {12, {{0, "r1"}, {2, "r1"}, {3, "r1"}, {6, "r1"}, {7, "r1"}, {8, "r1"}, {9, "r1"}, {10, "r1"}, {11, "r1"}}}, 
        {13, {{0, "r6"}, {2, "r6"}, {3, "r6"}, {6, "r6"}, {7, "r6"}, {8, "r6"}, {9, "r6"}, {10, "r6"}, {11, "r6"}}}, 
        {14, {{0, "r19"}, {2, "r19"}, {3, "r19"}, {6, "r19"}, {7, "r19"}, {8, "r19"}, {9, "r19"}, {10, "r19"}, {11, "r19"}}}, 
        {15, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {16, {{0, "s28"}, {7, "s27"}, {9, "s25"}}}, 
        {17, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {18, {{1, "r20"}, {5, "r20"}, {8, "r20"}}}, 
        {19, {{1, "r15"}, {5, "r15"}, {8, "r15"}}}, 
        {20, {{1, "r24"}, {5, "r24"}, {8, "r24"}}}, 
        {21, {{0, "r16"}, {2, "r16"}, {3, "s22"}, {6, "r16"}, {7, "r16"}, {8, "r16"}, {9, "r16"}, {10, "r16"}, {11, "r16"}}}, 
        {22, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {23, {{0, "r9"}, {2, "r9"}, {3, "r9"}, {6, "r9"}, {7, "r9"}, {8, "r9"}, {9, "r9"}, {10, "r9"}, {11, "r9"}}}, 
        {24, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {25, {{0, "r25"}, {2, "r25"}, {3, "r25"}, {6, "r25"}, {7, "r25"}, {8, "r25"}, {9, "r25"}, {10, "r25"}, {11, "r25"}}}, 
        {26, {{1, "r17"}, {5, "r17"}, {8, "r17"}}}, 
        {27, {{1, "r2"}, {5, "r2"}, {8, "r2"}}}, 
        {28, {{1, "r18"}, {5, "r18"}, {8, "r18"}}}, 
        {29, {{0, "r12"}, {2, "r12"}, {6, "s20"}, {7, "r12"}, {8, "r12"}, {9, "r12"}, {10, "r12"}, {11, "s19"}}}, 
        {30, {{9, "s36"}}}, 
        {31, {{0, "s28"}, {7, "s27"}, {9, "r7"}, {10, "r7"}}}, 
        {32, {{9, "r11"}, {10, "s34"}}}, 
        {33, {{9, "r23"}, {10, "r23"}}}, 
        {34, {{1, "s13"}, {5, "s15"}, {8, "s10"}}}, 
        {35, {{0, "s28"}, {7, "s27"}, {9, "r14"}, {10, "r14"}}}, 
        {36, {{0, "r4"}, {2, "r4"}, {3, "r4"}, {6, "r4"}, {7, "r4"}, {8, "r4"}, {9, "r4"}, {10, "r4"}, {11, "r4"}}}
    };

    std::unordered_map<int, std::unordered_map<int, int>> _sparse_goto_table = {
        {0, {{1, 1}, {6, 2}}}, 
        {2, {{5, 5}, {8, 3}}}, 
        {6, {{0, 12}, {5, 14}, {7, 30}, {9, 11}, {10, 31}, {11, 9}}}, 
        {7, {{0, 12}, {5, 14}, {9, 11}, {10, 8}, {11, 9}}}, 
        {8, {{3, 26}, {14, 24}}}, 
        {9, {{4, 18}, {12, 17}}}, 
        {15, {{0, 12}, {5, 14}, {9, 11}, {10, 16}, {11, 9}}}, 
        {16, {{3, 26}, {14, 24}}}, 
        {17, {{0, 12}, {5, 14}, {9, 21}}}, 
        {22, {{0, 23}, {5, 14}}}, 
        {24, {{0, 12}, {5, 14}, {9, 11}, {11, 29}}}, 
        {29, {{4, 18}, {12, 17}}}, 
        {31, {{3, 26}, {14, 24}, {15, 32}}}, 
        {32, {{2, 33}}}, 
        {34, {{0, 12}, {5, 14}, {9, 11}, {10, 35}, {11, 9}}}, 
        {35, {{3, 26}, {14, 24}}}
    };
    
    std::unordered_map<int, std::vector<std::string>> _sentence_index_grammar_tuple_mapping = {
        {6, {"0"}},
        {5, {"0"}},
        {25, {"1"}},
        {9, {"0", "1", "2"}},
        {16, {"0", "*1", "2"}},
        {12, {"0", "*1", "2"}},
        {11, {"0", "*1"}},
        {14, {"1"}},
        {7, {}},
        {23, {"*0", "*1"}},
        {4, {"0", "2"}},
        {21, {"0", "2"}},
        {8, {}},
        {3, {"*0", "1"}}
    };

    std::vector<int> _reduce_symbol_count = {1, 1, 1, 2, 4, 1, 1, 0, 0, 3, 1, 2, 3, 1, 2, 1, 3, 1, 1, 1, 1, 3, 1, 2, 1, 3, 1};

    std::vector<int> _reduce_non_terminal_index = {13, 9, 3, 6, 5, 0, 0, 15, 6, 9, 10, 7, 10, 11, 2, 4, 11, 14, 3, 0, 12, 8, 8, 15, 4, 0, 1};

    std::set<int> _none_grammar_tuple_reduce_set = {0, 1, 2, 10, 13, 15, 17, 18, 19, 20, 22, 24, 26};
};


template <class T>
class Interpreter {
public:
    using semantic_function = std::function<BosonSemanticsNode<T>(BosonSemanticsNode<T> &)>;

    Interpreter() = default;

    BosonSemanticsNode<T> execute(BosonGrammarNode &grammar_tree) {
        return this->_semantics_analysis(grammar_tree);
    }

    void register_action(const char *reduce_name, semantic_function function) {
        std::string reduce_name_string(reduce_name);
        this->register_action(reduce_name_string, function);
    }

    void register_action(std::string &reduce_name, semantic_function function) {
        this->_semantic_action_mapping[reduce_name] = function;
    }

private:
    std::unordered_map<int, std::string> _reduce_number_grammar_name_mapping = {
        {21, "set_variable"}, 
        {4, "function"}, 
        {12, "compute"}, 
        {16, "compute"}, 
        {9, "compute"}, 
        {25, "expression"}, 
        {5, "get_variable"}, 
        {6, "number"}
    };

    std::set<int> _naive_reduce_number_set = {1, 2, 5, 6, 10, 13, 15, 18, 19, 22, 24};

    std::unordered_map<std::string, semantic_function> _semantic_action_mapping{};

    BosonSemanticsNode<T> _semantics_analysis(BosonGrammarNode &grammar_tree) {
        std::string grammar_name{};
        if (this->_reduce_number_grammar_name_mapping.count(grammar_tree.get_reduce_number())) {
            grammar_name = this->_reduce_number_grammar_name_mapping[grammar_tree.get_reduce_number()];
        } else {
            grammar_name = "!grammar_hidden";
        }
        BosonSemanticsNode<T> semantics_node;
        for (auto &node: grammar_tree.children()) {
            if (!node.children().empty()) {
                semantics_node.append(this->_semantics_analysis(node));
            } else {
                BosonSemanticsNode<T> temp_node;
                temp_node.set_reduce_number(node.get_reduce_number());
                temp_node.set_text(node.get_text());
                semantics_node.append(temp_node);
            }
        }
        if (this->_semantic_action_mapping.count(grammar_name)) {
            return this->_semantic_action_mapping[grammar_name](semantics_node);
        } else if (this->_naive_reduce_number_set.count(grammar_tree.get_reduce_number())) {
            if (semantics_node.children().size() == 1) {
                return semantics_node[0];
            } else {
                return semantics_node;
            }
        } else {
            return semantics_node;
        }
    }
};
